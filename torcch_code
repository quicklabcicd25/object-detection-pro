import torch
import torchvision
from torchvision import transforms
from PIL import Image
import cv2
import numpy as np
import random
import os

# Load pretrained Faster R-CNN model
model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)
model.eval()

# COCO dataset labels
COCO_INSTANCE_CATEGORY_NAMES = [
    '__background__', 'person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus',
    'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'N/A', 'stop sign',
    'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow',
    'elephant', 'bear', 'zebra', 'giraffe', 'N/A', 'backpack', 'umbrella', 'N/A',
    'N/A', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard',
    'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard',
    'surfboard', 'tennis racket', 'bottle', 'N/A', 'wine glass', 'cup', 'fork',
    'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli',
    'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch',
    'potted plant', 'bed', 'N/A', 'dining table', 'N/A', 'N/A', 'toilet', 'N/A',
    'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave',
    'oven', 'toaster', 'sink', 'refrigerator', 'N/A', 'book', 'clock', 'vase',
    'scissors', 'teddy bear', 'hair drier', 'toothbrush'
]

# Transform image for model input
transform = transforms.Compose([
    transforms.ToTensor()
])

colorcodes = {}

def drawbox(image, box, label, score, color):
    xmin, ymin, xmax, ymax = [int(v) for v in box]
    cv2.rectangle(image, (xmin, ymin), (xmax, ymax), color, thickness=2)
    text = f"{label}: {int(score * 100)}%"
    cv2.rectangle(image, (xmin, ymin - 20), (xmax, ymin), color, -1)
    cv2.putText(image, text, (xmin, ymin - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255,255,255), 1)

def draw(image, outputs, score_threshold=0.5):
    for box, label_idx, score in zip(outputs['boxes'], outputs['labels'], outputs['scores']):
        if score >= score_threshold:
            label = COCO_INSTANCE_CATEGORY_NAMES[label_idx]
            if label not in colorcodes:
                colorcodes[label] = tuple(random.randint(0, 255) for _ in range(3))
            drawbox(image, box, label, score, colorcodes[label])
    return image

# Inference function
def detect_and_draw(image_path, model, output_name=None, show=True):
    image = cv2.imread(image_path)
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    pil_image = Image.fromarray(image_rgb)
    input_tensor = transform(pil_image).unsqueeze(0)

    with torch.no_grad():
        outputs = model(input_tensor)[0]

    image_with_boxes = draw(image.copy(), outputs)

    if output_name:
        cv2.imwrite(output_name, image_with_boxes)
    if show:
        cv2.imshow("Detection", image_with_boxes)
        cv2.waitKey(0)
        cv2.destroyAllWindows()

# Call function for your images
detect_and_draw("D:\object detection pro\image1.png", model)
#detect_and_draw("D:\object detection pro\image2.png", model, output_name="detected2.png", show=False)
detect_and_draw("D:\object detection pro\image3.png", model)
detect_and_draw("D:\object detection pro\women are disscusing.png", model)
